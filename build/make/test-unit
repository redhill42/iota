#!/bin/bash
set -e

bundle_test_setup() {
    mkdir -p /data/db
    chown -R mongodb /data/db
    local logfile=/var/log/mongodb/mongod.log
    gosu mongodb mongod --fork --logpath $logfile --bind_ip 127.0.0.1 >/dev/null
}

bundle_test_teardown() {
    gosu mongodb mongod --shutdown >/dev/null
}

# Run unit test suite, and store their output as a bundle. If $TESTFLAGS
# is set in the environment, it is passed as extra arguments to 'go test'.
# You can use this to select certain tests to run, eg.
#
#    TESTFLAGS='-test.run ^TestBuild$' ./build/make.sh test-unit
#
bundle_test_unit() {
    TESTFLAGS+=" -test.timeout=${TIMEOUT}"
    date
    if [ -z "$TESTDIRS" ]; then
        TEST_PATH=./...
    else
        TEST_PATH=./${TESTDIRS}
    fi

	  pkg_list=$(go list -e -f '{{.Dir}}' "${BUILDFLAGS[@]}" $TEST_PATH)

    test_pkg_list=()
    for pkg in $pkg_list; do
        if [ -n "$(find $pkg -name "*_test.go")" ]; then
            test_pkg_list+=( $pkg )
        fi
    done

    if [ -n "$COVER" ]; then
        mkdir -p "$DEST/coverprofiles"
        errors=0
        for pkg in ${test_pkg_list[@]}; do
            coverprofile="-coverprofile $ABS_DEST/coverprofiles/${pkg//\//-}"
            go test $coverprofile -ldflags "$LDFLAGS" "${BUILDFLAGS[@]}" $TESTFLAGS $pkg || ((++errors))
        done
        if ((errors != 0)); then
            echo >&2 'Test Failed!'
            return 1
        fi
    else
        go test $GCCGOFLAGS -ldflags "$LDFLAGS" "${BUILDFLAGS[@]}" $TESTFLAGS "${test_pkg_list[@]}"
    fi
}

if [[ "$(go version)" == *"gccgo"* ]]; then
    GCCGOFLAGS=-gccgoflags="-lpthread"
fi

bundle_test_setup
bundle_test_unit 2>&1 | tee -a "$DEST/test.log"
bundle_test_teardown
