#!/bin/bash
set -e

bundle_test_setup() {
    git config --system user.email test@example.com
    git config --system user.name 'Test User'
    git config --system push.default simple

    mkdir -p /data/db

    start_docker
    bundle_test_cleanup || true
    source "${MAKEDIR}/.ensure-images"

    tar -xf "$DEST/../tgz/iota-$VERSION-linux-amd64.tar.gz" --strip-components=1 -C /
}

bundle_test_teardown() {
    /etc/init.d/docker stop
}

bundle_test_cleanup() {
    set +e
    docker ps -aq | xargs docker rm -fv &>/dev/null
    docker volume ls -q | xargs docker volume rm &>/dev/null
    docker images | grep '<none>' | awk '{print $3}' | xargs docker rmi &>/dev/null
    set -e
}

start_docker() {
    if [ -n "$DOCKER_REGISTRY_MIRROR" ]; then
        sed -i /etc/default/docker -e 's|#DOCKER_OPTS=.*|DOCKER_OPTS="--registry-mirror '$DOCKER_REGISTRY_MIRROR'"|'
    fi

    /etc/init.d/docker start

    for i in {1..10}; do
        docker version &>/dev/null && break
        sleep 0.5
    done
}

# Run unit test suite, and store their output as a bundle. If $TESTFLAGS
# is set in the environment, it is passed as extra arguments to 'go test'.
# You can use this to select certain tests to run, eg.
#
#    TESTFLAGS='-test.run ^TestBuild$' ./build/make.sh test-unit
#
bundle_test_unit() {
    TESTFLAGS+=" -test.timeout=${TIMEOUT}"
    date
    if [ -z "$TESTDIRS" ]; then
        TEST_PATH=./...
    else
        TEST_PATH=./${TESTDIRS}
    fi

    pkg_list=$(go list -e \
        -f '{{if ne .Name "github.com/redhill42/iota"}}
            {{.ImportPath}}
            {{end}}' \
        "${BUILDFLAGS[@]}" $TEST_PATH \
        | grep github.com/redhill42/iota \
        | grep -v github.com/redhill42/iota/vendor)

    test_pkg_list=()
    for pkg in $pkg_list; do
        if [ -n "$(find ../../../$pkg -name "*_test.go")" ]; then
            test_pkg_list+=( $pkg )
        fi
    done

    if [ -n "$COVER" ]; then
        mkdir -p "$DEST/coverprofiles"
        errors=0
        for pkg in ${test_pkg_list[@]}; do
            coverprofile="-coverprofile $ABS_DEST/coverprofiles/${pkg//\//-}"
            go test $coverprofile -ldflags "$LDFLAGS" "${BUILDFLAGS[@]}" $TESTFLAGS $pkg || ((++errors))
        done
        if ((errors != 0)); then
            echo >&2 'Test Failed!'
            return 1
        fi
    else
        go test $GCCGOFLAGS -ldflags "$LDFLAGS" "${BUILDFLAGS[@]}" $TESTFLAGS "${test_pkg_list[@]}"
    fi
}

if [[ "$(go version)" == *"gccgo"* ]]; then
    GCCGOFLAGS=-gccgoflags="-lpthread"
fi

bundle_test_setup
bundle_test_unit 2>&1 | tee -a "$DEST/test.log"
bundle_test_teardown
